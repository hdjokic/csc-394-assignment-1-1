{"version":3,"sources":["index.js"],"names":["server","require","request","expect","describe","app","before","done","listen","err","it","get","res","put","post","send","end","after","close"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgBE,MAA/B;;AAEAC,QAAQ,CAAC,oBAAD,EAAuB,YAAY;AAEvC,MAAIC,GAAJ;AAEAC,EAAAA,MAAM,CAAC,UAASC,IAAT,EAAe;AAElBF,IAAAA,GAAG,GAAGL,MAAM,CAACQ,MAAP,CAAc,IAAd,EAAoB,UAAUC,GAAV,EAAe;AACrC,UAAIA,GAAJ,EAAS;AAAE,eAAOF,IAAI,CAACE,GAAD,CAAX;AAAmB;;AAC9BF,MAAAA,IAAI;AACP,KAHK,CAAN;AAIH,GANK,CAAN;AAQAG,EAAAA,EAAE,CAAC,sCAAD,EACE,UAAUH,IAAV,EAAgB;AAEZL,IAAAA,OAAO,CAACF,MAAD,CAAP,CACKW,GADL,CACS,GADT,EAEKR,MAFL,CAEY,cAFZ,EAE4B,MAF5B,EAGKA,MAHL,CAGY,GAHZ,EAGiB,UAASM,GAAT,EAAcG,GAAd,EAAmB;AAC5B,UAAIH,GAAJ,EAAS;AAAE,eAAOF,IAAI,CAACE,GAAD,CAAX;AAAmB;;AAE9BF,MAAAA,IAAI;AACP,KAPL;AAQH,GAXH,CAAF;AAaAG,EAAAA,EAAE,CAAC,sDAAD,EACE,UAASH,IAAT,EAAe;AACXL,IAAAA,OAAO,CAACF,MAAD,CAAP,CACCa,GADD,CACK,GADL,EAECV,MAFD,CAEQ,GAFR,EAEa,UAASM,GAAT,EAAcG,GAAd,EAAmB;AAC5B,UAAIH,GAAJ,EAAS;AAAE,eAAOF,IAAI,CAACE,GAAD,CAAX;AAAmB;;AAE9BF,MAAAA,IAAI;AACP,KAND;AAOH,GATH,CAAF;AAWAG,EAAAA,EAAE,CAAC,0EAAD,EACE,UAAUH,IAAV,EAAgB;AACZL,IAAAA,OAAO,CAACF,MAAD,CAAP,CACKc,IADL,CACU,GADV,EAEKC,IAFL,CAEU;AACF,oBAAc,MADZ;AAEF,mBAAa;AAFX,KAFV,EAMKZ,MANL,CAMY,GANZ,EAOKA,MAPL,CAOY,UAPZ,EAOwB,GAPxB,EAQKa,GARL,CAQST,IART;AASH,GAXH,CAAF;AAaAG,EAAAA,EAAE,CAAC,0EAAD,EACE,UAAUH,IAAV,EAAgB;AACZL,IAAAA,OAAO,CAACF,MAAD,CAAP,CACKc,IADL,CACU,GADV,EAEKX,MAFL,CAEY,GAFZ,EAGKa,GAHL,CAGST,IAHT;AAIH,GANH,CAAF;AAQAU,EAAAA,KAAK,CAAC,UAASV,IAAT,EAAe;AACjBF,IAAAA,GAAG,CAACa,KAAJ,CAAU,YAAW;AACjBX,MAAAA,IAAI;AACP,KAFD;AAGH,GAJI,CAAL;AAMH,CA/DO,CAAR","sourcesContent":["const server = require('../server');\r\nconst request = require('supertest');\r\nconst expect = require('chai').expect;\r\n\r\ndescribe('The express server', function () {\r\n\r\n    var app;\r\n\r\n    before(function(done) {\r\n\r\n        app = server.listen(3000, function (err) {\r\n            if (err) { return done(err); }\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should render html for the root path',\r\n        function (done) {\r\n\r\n            request(server)\r\n                .get('/')\r\n                .expect('Content-Type', /html/)\r\n                .expect(200, function(err, res) {\r\n                    if (err) { return done(err); }\r\n\r\n                    done();\r\n                });\r\n        });\r\n\r\n    it('should not respond to PUT requests for the root path',\r\n        function(done) {\r\n            request(server)\r\n            .put('/')\r\n            .expect(404, function(err, res) {\r\n                if (err) { return done(err); }\r\n\r\n                done();\r\n            });\r\n        });\r\n\r\n    it('should respond to valid POST requests for teh root path, with a redirect',\r\n        function (done) {\r\n            request(server)\r\n                .post('/')\r\n                .send({\r\n                    \"first_name\": \"test\",\r\n                    \"last_name\": \"test\"\r\n                })\r\n                .expect(302)\r\n                .expect('Location', '/')\r\n                .end(done);\r\n        });\r\n\r\n    it('should respond to invalid POST requests for the root path, with an error',\r\n        function (done) {\r\n            request(server)\r\n                .post('/')\r\n                .expect(400)\r\n                .end(done);\r\n        });\r\n\r\n    after(function(done) {\r\n        app.close(function() {\r\n            done();\r\n        });\r\n    })\r\n\r\n});\r\n"],"file":"index.dev.js"}