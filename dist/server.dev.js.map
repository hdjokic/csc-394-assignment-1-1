{"version":3,"sources":["server.js"],"names":["express","require","app","bodyParser","body","validationResult","port","process","env","PORT","set","use","json","urlencoded","extended","Pool","connectionParams","DATABASE_URL","connectionString","ssl","rejectUnauthorized","user","host","database","password","console","log","pool","get","req","res","query","err","version_results","rows","team_members_results","render","teamNumber","databaseVersion","version","teamMembers","post","isAlpha","isLength","min","withMessage","errors","isEmpty","status","send","array","first_name","last_name","result","redirect","module","exports"],"mappings":"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","sourcesContent":["const express = require('express')\r\nconst app = express();\r\nconst bodyParser = require('body-parser');\r\nconst { body, validationResult } = require('express-validator');\r\n\r\nconst port = process.env.PORT || 3000\r\n\r\n// Set the view engine for the express app\r\napp.set(\"view engine\", \"pug\")\r\n\r\n// for parsing application/json\r\napp.use(bodyParser.json());\r\n\r\n// for parsing application/xwww-\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n//form-urlencoded\r\n\r\n// Database\r\nconst Pool = require('pg').Pool\r\n\r\nvar connectionParams = null;\r\n/* istanbul ignore if */\r\nif (process.env.DATABASE_URL != null) {\r\n    connectionParams = {\r\n        connectionString: process.env.DATABASE_URL,\r\n        ssl: { rejectUnauthorized: false }\r\n    }\r\n} else {\r\n    connectionParams = {\r\n        user: 'api_user',\r\n        host: 'localhost',\r\n        database: 'api',\r\n        password: 'password',\r\n        port: 5432\r\n    }\r\n}\r\nconsole.log(connectionParams)\r\nconst pool = new Pool(connectionParams)\r\n\r\n\r\napp.get('/', (req, res) => {\r\n\r\n  console.log('Accept: ' + req.get('Accept'))\r\n\r\n  pool.query('SELECT VERSION()', (err, version_results) => {\r\n    console.log(err, version_results.rows)\r\n\r\n    pool.query('SELECT * FROM team_members', (err, team_members_results) => {\r\n      console.log(err, team_members_results)\r\n\r\n      res.render('index', {\r\n                            teamNumber: 5,\r\n                            databaseVersion: version_results.rows[0].version,\r\n                            teamMembers: team_members_results.rows\r\n                          })\r\n\r\n      console.log('Content-Type: ' + res.get('Content-Type'))\r\n    })\r\n  })\r\n})\r\n\r\napp.post('/', \r\n  body('first_name')\r\n    .isAlpha()\r\n    .isLength({ min: 1})\r\n    .withMessage('must be valid'),\r\n  body('last_name')\r\n    .isAlpha()\r\n    .isLength({ min: 0 })\r\n    .withMessage('must be valid'),\r\n(req, res) => {\r\n\r\n  const errors = validationResult(req);\r\n  if (!errors.isEmpty()) {\r\n    return res.status(400).send({ errors: errors.array() });\r\n  }\r\n\r\n    pool.query(`INSERT INTO team_members (first_name, last_name) VALUES ('${req.body.first_name}', '${req.body.last_name}')`, (err, result) => {\r\n\r\n        console.log(err, result)\r\n\r\n        res.redirect('/')\r\n    })\r\n  })\r\n\r\nmodule.exports = app;"],"file":"server.dev.js"}